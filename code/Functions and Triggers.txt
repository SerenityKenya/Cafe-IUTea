DROP SEQUENCE ACC_ID;
CREATE SEQUENCE ACC_ID MINVALUE 01 MAXVALUE 99 START WITH 01 INCREMENT BY 1 CACHE 20 CYCLE;
DELIMITER //
CREATE OR REPLACE FUNCTION ASSIGN_ID(NAME VARCHAR(50)) 
RETURNS VARCHAR(100)
BEGIN
    DECLARE A_NAME VARCHAR(20);
    DECLARE A_YEAR VARCHAR(20);
    DECLARE A_MONTH VARCHAR(20);
    DECLARE A_DAY VARCHAR(20);
    DECLARE A_SEQ INTEGER;
    DECLARE A_SEQ_ID VARCHAR(20);
    DECLARE A_ID VARCHAR(100);
    DECLARE C_DATE DATE;
    SET A_SEQ = NEXTVAL(ACC_ID);
    SET A_SEQ_ID = LPAD(A_SEQ, 2, '0');
    SET C_DATE = CURDATE();
    SET A_NAME = UPPER(SUBSTRING(NAME, 1, 3));
    SET A_DAY = DATE_FORMAT(C_DATE, '%d');
    SET A_MONTH = DATE_FORMAT(C_DATE, '%m');
    SET A_YEAR = DATE_FORMAT(C_DATE, '%Y');
    SET A_ID = CONCAT(A_YEAR, A_MONTH, A_DAY, '_',A_NAME, '_', A_SEQ_ID);
    RETURN A_ID;
END;

SELECT ASSIGN_ID("NAZMUL") AS RESULT

TRIGGER TO AUTO ASSIGN EMPLOYEE ID
DELIMITER //
CREATE OR REPLACE TRIGGER AUTO_ASSIGN_ID
BEFORE INSERT
ON employee
FOR EACH ROW
BEGIN
    SET NEW.e_id = ASSIGN_ID(NEW.e_name);
END;

TRIGGER TO AUTO ASSIGN MANAGER ID
DELIMITER //
CREATE OR REPLACE TRIGGER AUTO_ASSIGN_MANAGER_ID
BEFORE INSERT
ON manager
FOR EACH ROW
BEGIN
    SET NEW.m_id = ASSIGN_ID(NEW.m_name);
END;


menu_cost update triggers

insert ingredient
procedure
DELIMITER //
CREATE OR REPLACE PROCEDURE MENU_COST_UPDATE_ING_INSERT(M_ID INTEGER, I_ID INTEGER, QTY INTEGER) 
BEGIN
    DECLARE NEW_COST INTEGER;
    DECLARE PREV_COST INTEGER;
    DECLARE PRICE INTEGER;
    SELECT menu_cost INTO PREV_COST FROM menu WHERE menu_id = M_ID; 
    SELECT in_price INTO PRICE FROM inventories WHERE in_id = I_ID;
	SET NEW_COST = (PREV_COST + (QTY*PRICE));
    UPDATE menu SET menu_cost=NEW_COST WHERE menu_id = M_ID;
END;

trigger
DELIMITER //
CREATE OR REPLACE TRIGGER MENU_COST_UPDATE_ON_ING_INSERT
BEFORE INSERT 
ON ingredients
FOR EACH ROW
BEGIN
    CALL MENU_COST_UPDATE_ING_INSERT(NEW.menu_id, NEW.in_id, NEW.ing_amount); 
END;




update ingredient qty
procedure

DELIMITER //
CREATE OR REPLACE PROCEDURE MENU_COST_UPDATE_ING_AMOUNT_CHNG(M_ID INTEGER, I_ID INTEGER, NEW_QTY INTEGER, PREV_QTY INTEGER) 
BEGIN
    DECLARE NEW_COST INTEGER;
    DECLARE PREV_COST INTEGER;
    DECLARE PRICE INTEGER;
    SELECT menu_cost INTO PREV_COST FROM menu WHERE menu_id = M_ID; 
    SELECT in_price INTO PRICE FROM inventories WHERE in_id = I_ID;
    SET NEW_COST = (PREV_COST + ((NEW_QTY-PREV_QTY)*PRICE));
    UPDATE menu SET menu_cost=NEW_COST WHERE menu_id = M_ID;
END;

trigger

DELIMITER //
CREATE OR REPLACE TRIGGER MENU_COST_UPDATE_ON_ING_UPDATE
BEFORE UPDATE 
ON ingredients
FOR EACH ROW
BEGIN
    CALL MENU_COST_UPDATE_ING_AMOUNT_CHNG(OLD.menu_id, OLD.in_id, NEW.ing_amount, OLD.ing_amount); 
END;





update ingredeient price
 
procedure
DELIMITER //
CREATE OR REPLACE PROCEDURE MENU_COST_UPDATE_ING_PRICE_CHNG(I_ID INTEGER, NEW_PRICE INTEGER, PREV_PRICE INTEGER) 
BEGIN
    DECLARE NEW_COST INTEGER;
    DECLARE PREV_COST INTEGER;
    DECLARE PRICE INTEGER;
	DECLARE M_ID INTEGER;
    DECLARE QTY INTEGER;
	DECLARE done INT DEFAULT FALSE;
	DECLARE C CURSOR FOR SELECT menu_id,ing_amount FROM ingredients WHERE in_id=I_ID;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
	OPEN C;
	cursor_loop: LOOP
    	FETCH C INTO M_ID, QTY;
    	IF done THEN
        	LEAVE cursor_loop;
    	END IF;
		SELECT menu_cost INTO PREV_COST FROM menu WHERE menu_id = M_ID;
        SET PRICE = NEW_PRICE - PREV_PRICE;
		SET NEW_COST = (PREV_COST + (QTY*PRICE));
        UPDATE menu SET menu_cost=NEW_COST WHERE menu_id = M_ID;
	END LOOP; 
	CLOSE C;
END;

trigger
DELIMITER //
CREATE OR REPLACE TRIGGER MENU_COST_UPDATE_ON_ING_PRICE_CHNG
BEFORE UPDATE 
ON inventories
FOR EACH ROW
BEGIN
    IF NEW.in_price!=OLD.in_price THEN
    	CALL MENU_COST_UPDATE_ING_PRICE_CHNG(OLD.in_id, NEW.in_price, OLD.in_price); 
    END IF;
END;
